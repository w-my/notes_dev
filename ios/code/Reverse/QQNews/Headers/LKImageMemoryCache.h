//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "LKImageCache.h"

@interface LKImageMemoryCache : LKImageCache
{
    struct list<ImageNode *, std::__1::allocator<ImageNode *>> FIFOQueue;
    struct list<ImageNode *, std::__1::allocator<ImageNode *>> LRUQueue;
    struct map<std::__1::basic_string<char>, ImagePointer *, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, ImagePointer *>>> imageMap;
    unsigned long long _maxLengthForFIFO;
    unsigned long long _maxLengthForLRU;
    unsigned long long _cacheSizeLimit;
}

+ (id)defaultCache;
@property(nonatomic) unsigned long long cacheSizeLimit; // @synthesize cacheSizeLimit=_cacheSizeLimit;
@property(nonatomic) unsigned long long maxLengthForLRU; // @synthesize maxLengthForLRU=_maxLengthForLRU;
@property(nonatomic) unsigned long long maxLengthForFIFO; // @synthesize maxLengthForFIFO=_maxLengthForFIFO;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)cacheImage:(id)arg1 forRequest:(id)arg2;
- (id)imageForRequest:(id)arg1 continueLoad:(_Bool *)arg2;
- (void)didReceiveLowMemoryNotification;
- (_Bool)hasCacheWithURL:(id)arg1;
- (id)imageWithURL:(id)arg1;
- (void)visit:(id)arg1;
- (long long)cacheSize:(_Bool)arg1;
- (long long)cacheSize;
- (long long)imageSize:(id)arg1 accurate:(_Bool)arg2;
- (long long)singleImageSize:(id)arg1 accurate:(_Bool)arg2;
- (void)cacheImage:(id)arg1 URL:(id)arg2;
- (void)clearLastOneInFIFO;
- (void)clearLastOneInLRU;
- (void)clearLastOne;
- (void)limitCacheSize;
- (id)keyForURL:(id)arg1;
- (void)clearWithKey:(id)arg1;
- (void)deleteCache:(basic_string_90719d97)arg1;
- (void)clearWithURL:(id)arg1;
- (void)clear;
- (void)dealloc;
- (id)init;

@end

